#ifdef TRACE
#define x_binfo_hp (fun f -> \
  Debug.binfo_hprint (fun x -> (VarGen.build_loc_str __FILE__ __LINE__)^(f x)))
#define x_binfo_pp (fun s -> \
  Debug.binfo_pprint ((VarGen.build_loc_str __FILE__ __LINE__)^s))
#define x_binfo_zp (fun s -> \
  Debug.binfo_zprint (lazy ((VarGen.build_loc_str __FILE__ __LINE__)^(Lazy.force s))))

#define x_tinfo_hp (fun f -> \
  Debug.tinfo_hprint (fun x -> (VarGen.build_loc_str __FILE__ __LINE__)^(f x)))
#define x_tinfo_pp (fun s -> \
  Debug.tinfo_pprint ((VarGen.build_loc_str __FILE__ __LINE__)^s))
#define x_tinfo_zp (fun s -> \
  Debug.tinfo_zprint (lazy ((VarGen.build_loc_str __FILE__ __LINE__)^(Lazy.force s))))

#define x_dinfo_hp (fun f -> \
  Debug.dinfo_hprint (fun x -> (VarGen.build_loc_str __FILE__ __LINE__)^(f x)))
#define x_dinfo_pp (fun s -> \
  Debug.dinfo_pprint ((VarGen.build_loc_str __FILE__ __LINE__)^s))
#define x_dinfo_zp (fun s -> \
  Debug.dinfo_zprint (lazy ((VarGen.build_loc_str __FILE__ __LINE__)^(Lazy.force s))))

#define x_winfo_pp (fun s -> \
  Debug.winfo_pprint ((VarGen.build_loc_str __FILE__ __LINE__)^s))
#define x_ninfo_hp (fun pr s p -> ())
#define x_ninfo_pp (fun s p -> ())
#define x_add_1 (fun f x -> let () = VarGen.store_loc_str  __FILE__ __LINE__ in f x)
#define x_add (fun f x y -> let () = VarGen.store_loc_str  __FILE__ __LINE__ in f x y)
#define x_add_3 (fun f a b c -> let () = VarGen.store_loc_str  __FILE__ __LINE__ in f a b c)
#define x_noop
#else
#define x_binfo_hp Debug.binfo_hprint
#define x_binfo_pp Debug.binfo_pprint 
#define x_binfo_zp Debug.binfo_zprint 
#define x_tinfo_hp Debug.tinfo_hprint 
#define x_tinfo_pp Debug.tinfo_pprint 
#define x_tinfo_zp Debug.tinfo_zprint 
#define x_dinfo_hp Debug.dinfo_hprint 
#define x_dinfo_pp Debug.dinfo_pprint 
#define x_dinfo_zp Debug.dinfo_zprint 
#define x_winfo_pp Debug.winfo_pprint
#define x_ninfo_hp (fun pr s p -> ())
#define x_ninfo_pp (fun s p -> ())
#define x_add 
#define x_add_1
#define x_add_3
#define x_noop
#endif
